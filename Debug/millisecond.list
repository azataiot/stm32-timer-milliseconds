
millisecond.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003388  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a0  080035a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035a8  080035a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080035bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080035bc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cd5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002020  00000000  00000000  00031d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00034cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025671  00000000  00000000  00035b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116d9  00000000  00000000  0005b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7afd  00000000  00000000  0006c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001643b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  00164408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003548 	.word	0x08003548

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003548 	.word	0x08003548

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t delay) {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0); // let the counter start from 0;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <delay+0x30>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 800052e:	bf00      	nop
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <delay+0x30>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	429a      	cmp	r2, r3
 800053a:	d3f9      	bcc.n	8000530 <delay+0x14>
		;
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	200000b8 	.word	0x200000b8

08000550 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000554:	f000 fa81 	bl	8000a5a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000558:	f000 f816 	bl	8000588 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800055c:	f000 f900 	bl	8000760 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000560:	f000 f860 	bl	8000624 <MX_LPUART1_UART_Init>
	MX_TIM1_Init();
 8000564:	f000 f8a8 	bl	80006b8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0x34>)
 800056a:	f001 fe5d 	bl	8002228 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800056e:	2102      	movs	r1, #2
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fd8c 	bl	8001090 <HAL_GPIO_TogglePin>
//		delay(100); // 100 nano seconds, which is 1 micro seconds
		delay(10000); // 100 us delay.
 8000578:	f242 7010 	movw	r0, #10000	; 0x2710
 800057c:	f7ff ffce 	bl	800051c <delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000580:	e7f5      	b.n	800056e <main+0x1e>
 8000582:	bf00      	nop
 8000584:	200000b8 	.word	0x200000b8

08000588 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2238      	movs	r2, #56	; 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 ffce 	bl	8003538 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ae:	f000 fdad 	bl	800110c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 25;
 80005cc:	2319      	movs	r3, #25
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fe47 	bl	8001274 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x68>
		Error_Handler();
 80005ec:	f000 f926 	bl	800083c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2303      	movs	r3, #3
 80005f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000604:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f94a 	bl	80018a4 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x92>
		Error_Handler();
 8000616:	f000 f911 	bl	800083c <Error_Handler>
	}
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 800062a:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <MX_LPUART1_UART_Init+0x90>)
 800062c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 8000662:	2200      	movs	r2, #0
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 8000668:	f002 f93e 	bl	80028e8 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_LPUART1_UART_Init+0x52>
		Error_Handler();
 8000672:	f000 f8e3 	bl	800083c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8000676:	2100      	movs	r1, #0
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 800067a:	f002 fe6f 	bl	800335c <HAL_UARTEx_SetTxFifoThreshold>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_LPUART1_UART_Init+0x64>
			!= HAL_OK) {
		Error_Handler();
 8000684:	f000 f8da 	bl	800083c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8000688:	2100      	movs	r1, #0
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 800068c:	f002 fea4 	bl	80033d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_LPUART1_UART_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8000696:	f000 f8d1 	bl	800083c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_LPUART1_UART_Init+0x8c>)
 800069c:	f002 fe25 	bl	80032ea <HAL_UARTEx_DisableFifoMode>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_LPUART1_UART_Init+0x86>
		Error_Handler();
 80006a6:	f000 f8c9 	bl	800083c <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40008000 	.word	0x40008000

080006b8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_TIM1_Init+0xa0>)
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <MX_TIM1_Init+0xa4>)
 80006da:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1 - 1;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_TIM1_Init+0xa0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_TIM1_Init+0xa0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65534;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_TIM1_Init+0xa0>)
 80006ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80006ee:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_TIM1_Init+0xa0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_TIM1_Init+0xa0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_TIM1_Init+0xa0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <MX_TIM1_Init+0xa0>)
 8000704:	f001 fd38 	bl	8002178 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x5a>
		Error_Handler();
 800070e:	f000 f895 	bl	800083c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_TIM1_Init+0xa0>)
 8000720:	f001 fdf2 	bl	8002308 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x76>
		Error_Handler();
 800072a:	f000 f887 	bl	800083c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_TIM1_Init+0xa0>)
 8000740:	f002 f83c 	bl	80027bc <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 800074a:	f000 f877 	bl	800083c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000b8 	.word	0x200000b8
 800075c:	40012c00 	.word	0x40012c00

08000760 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a2e      	ldr	r2, [pc, #184]	; (8000834 <MX_GPIO_Init+0xd4>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a28      	ldr	r2, [pc, #160]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000794:	f043 0320 	orr.w	r3, r3, #32
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_GPIO_Init+0xd4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0320 	and.w	r3, r3, #32
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a22      	ldr	r2, [pc, #136]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2122      	movs	r1, #34	; 0x22
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f000 fc3f 	bl	8001060 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <MX_GPIO_Init+0xd8>)
 80007fa:	f000 faaf 	bl	8000d5c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 LD2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | LD2_Pin;
 80007fe:	2322      	movs	r3, #34	; 0x22
 8000800:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f000 faa0 	bl	8000d5c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2028      	movs	r0, #40	; 0x28
 8000822:	f000 fa66 	bl	8000cf2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000826:	2028      	movs	r0, #40	; 0x28
 8000828:	f000 fa7d 	bl	8000d26 <HAL_NVIC_EnableIRQ>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	48000800 	.word	0x48000800

0800083c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6613      	str	r3, [r2, #96]	; 0x60
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800087e:	f000 fce9 	bl	8001254 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09e      	sub	sp, #120	; 0x78
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2254      	movs	r2, #84	; 0x54
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fe41 	bl	8003538 <memset>
  if(huart->Instance==LPUART1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <HAL_UART_MspInit+0xa8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d136      	bne.n	800092e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008c0:	2320      	movs	r3, #32
 80008c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fa05 	bl	8001cdc <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d8:	f7ff ffb0 	bl	800083c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_UART_MspInit+0xac>)
 80008de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e0:	4a16      	ldr	r2, [pc, #88]	; (800093c <HAL_UART_MspInit+0xac>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_UART_MspInit+0xac>)
 80008ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_UART_MspInit+0xac>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_UART_MspInit+0xac>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_UART_MspInit+0xac>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800090c:	230c      	movs	r3, #12
 800090e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800091c:	230c      	movs	r3, #12
 800091e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f000 fa17 	bl	8000d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3778      	adds	r7, #120	; 0x78
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40008000 	.word	0x40008000
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_TIM_Base_MspInit+0x38>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d10b      	bne.n	800096a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_TIM_Base_MspInit+0x3c>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_Base_MspInit+0x3c>)
 8000958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800095c:	6613      	str	r3, [r2, #96]	; 0x60
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <HAL_TIM_Base_MspInit+0x3c>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40012c00 	.word	0x40012c00
 800097c:	40021000 	.word	0x40021000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f898 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009dc:	f000 fb72 	bl	80010c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SystemInit+0x20>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <SystemInit+0x20>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490e      	ldr	r1, [pc, #56]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0b      	ldr	r4, [pc, #44]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a32:	f7ff ffd7 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a36:	f002 fd5b 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3a:	f7ff fd89 	bl	8000550 <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a4c:	080035b0 	.word	0x080035b0
  ldr r2, =_sbss
 8000a50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a54:	20000108 	.word	0x20000108

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>

08000a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f939 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f80e 	bl	8000a8c <HAL_InitTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e001      	b.n	8000a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a7c:	f7ff fee4 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a80:	79fb      	ldrb	r3, [r7, #7]

}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_InitTick+0x68>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d022      	beq.n	8000ae6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_InitTick+0x6c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_InitTick+0x68>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f944 	bl	8000d42 <HAL_SYSTICK_Config>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10f      	bne.n	8000ae0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	d809      	bhi.n	8000ada <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ace:	f000 f910 	bl	8000cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_InitTick+0x70>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	e007      	b.n	8000aea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e004      	b.n	8000aea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e001      	b.n	8000aea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b10:	6013      	str	r3, [r2, #0]
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	20000104 	.word	0x20000104
 8000b20:	20000008 	.word	0x20000008

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000104 	.word	0x20000104

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <__NVIC_EnableIRQ+0x38>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff29 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff40 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff90 	bl	8000c30 <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5f 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff33 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffa4 	bl	8000c98 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d6a:	e15a      	b.n	8001022 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 814c 	beq.w	800101c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d130      	bne.n	8000dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 0201 	and.w	r2, r3, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d017      	beq.n	8000e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d123      	bne.n	8000e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0203 	and.w	r2, r3, #3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 80a6 	beq.w	800101c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	4b5b      	ldr	r3, [pc, #364]	; (8001040 <HAL_GPIO_Init+0x2e4>)
 8000ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed4:	4a5a      	ldr	r2, [pc, #360]	; (8001040 <HAL_GPIO_Init+0x2e4>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6613      	str	r3, [r2, #96]	; 0x60
 8000edc:	4b58      	ldr	r3, [pc, #352]	; (8001040 <HAL_GPIO_Init+0x2e4>)
 8000ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee8:	4a56      	ldr	r2, [pc, #344]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f12:	d01f      	beq.n	8000f54 <HAL_GPIO_Init+0x1f8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a4c      	ldr	r2, [pc, #304]	; (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d019      	beq.n	8000f50 <HAL_GPIO_Init+0x1f4>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4b      	ldr	r2, [pc, #300]	; (800104c <HAL_GPIO_Init+0x2f0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_Init+0x1f0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <HAL_GPIO_Init+0x2f4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00d      	beq.n	8000f48 <HAL_GPIO_Init+0x1ec>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a49      	ldr	r2, [pc, #292]	; (8001054 <HAL_GPIO_Init+0x2f8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x1e8>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a48      	ldr	r2, [pc, #288]	; (8001058 <HAL_GPIO_Init+0x2fc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_GPIO_Init+0x1e4>
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	e00a      	b.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f40:	2306      	movs	r3, #6
 8000f42:	e008      	b.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f44:	2304      	movs	r3, #4
 8000f46:	e006      	b.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e004      	b.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f54:	2300      	movs	r3, #0
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	f002 0203 	and.w	r2, r2, #3
 8000f5c:	0092      	lsls	r2, r2, #2
 8000f5e:	4093      	lsls	r3, r2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f66:	4937      	ldr	r1, [pc, #220]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_GPIO_Init+0x300>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f98:	4a30      	ldr	r2, [pc, #192]	; (800105c <HAL_GPIO_Init+0x300>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_GPIO_Init+0x300>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_GPIO_Init+0x300>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_GPIO_Init+0x300>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_GPIO_Init+0x300>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_GPIO_Init+0x300>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_GPIO_Init+0x300>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f ae9d 	bne.w	8000d6c <HAL_GPIO_Init+0x10>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	48000c00 	.word	0x48000c00
 8001054:	48001000 	.word	0x48001000
 8001058:	48001400 	.word	0x48001400
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800107c:	e002      	b.n	8001084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43d9      	mvns	r1, r3
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	400b      	ands	r3, r1
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f806 	bl	80010f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d141      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001126:	d131      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001128:	4b47      	ldr	r3, [pc, #284]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800112e:	4a46      	ldr	r2, [pc, #280]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001140:	4a41      	ldr	r2, [pc, #260]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001148:	4b40      	ldr	r3, [pc, #256]	; (800124c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2232      	movs	r2, #50	; 0x32
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	0c9b      	lsrs	r3, r3, #18
 800115a:	3301      	adds	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115e:	e002      	b.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3b01      	subs	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001172:	d102      	bne.n	800117a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f2      	bne.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001186:	d158      	bne.n	800123a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e057      	b.n	800123c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001192:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800119c:	e04d      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a4:	d141      	bne.n	800122a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b2:	d131      	bne.n	8001218 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011cc:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2232      	movs	r2, #50	; 0x32
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9b      	lsrs	r3, r3, #18
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ea:	e002      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d102      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f2      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d112      	bne.n	800123a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e011      	b.n	800123c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001228:	e007      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001238:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40007000 	.word	0x40007000
 800124c:	20000000 	.word	0x20000000
 8001250:	431bde83 	.word	0x431bde83

08001254 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001262:	6093      	str	r3, [r2, #8]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40007000 	.word	0x40007000

08001274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e306      	b.n	8001894 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d075      	beq.n	800137e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001292:	4b97      	ldr	r3, [pc, #604]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129c:	4b94      	ldr	r3, [pc, #592]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b0c      	cmp	r3, #12
 80012aa:	d102      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3e>
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d002      	beq.n	80012b8 <HAL_RCC_OscConfig+0x44>
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d10b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	4b8d      	ldr	r3, [pc, #564]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d05b      	beq.n	800137c <HAL_RCC_OscConfig+0x108>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d157      	bne.n	800137c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e2e1      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x74>
 80012da:	4b85      	ldr	r3, [pc, #532]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a84      	ldr	r2, [pc, #528]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7e      	ldr	r2, [pc, #504]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b7c      	ldr	r3, [pc, #496]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7b      	ldr	r2, [pc, #492]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 800130c:	4b78      	ldr	r3, [pc, #480]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b75      	ldr	r3, [pc, #468]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a74      	ldr	r2, [pc, #464]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fbfa 	bl	8000b24 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fbf6 	bl	8000b24 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e2a6      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001346:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xc0>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fbe6 	bl	8000b24 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fbe2 	bl	8000b24 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e292      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800136e:	4b60      	ldr	r3, [pc, #384]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0xe8>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d075      	beq.n	8001476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138a:	4b59      	ldr	r3, [pc, #356]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001394:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d102      	bne.n	80013aa <HAL_RCC_OscConfig+0x136>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d002      	beq.n	80013b0 <HAL_RCC_OscConfig+0x13c>
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d11f      	bne.n	80013f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b0:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_RCC_OscConfig+0x154>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e265      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	061b      	lsls	r3, r3, #24
 80013d6:	4946      	ldr	r1, [pc, #280]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013dc:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fb53 	bl	8000a8c <HAL_InitTick>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d043      	beq.n	8001474 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e251      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d023      	beq.n	8001440 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a3c      	ldr	r2, [pc, #240]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fb8e 	bl	8000b24 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fb8a 	bl	8000b24 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e23a      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	061b      	lsls	r3, r3, #24
 8001438:	492d      	ldr	r1, [pc, #180]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
 800143e:	e01a      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001446:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800144a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fb6a 	bl	8000b24 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fb66 	bl	8000b24 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e216      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1e0>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d041      	beq.n	8001506 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d01c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149a:	f7ff fb43 	bl	8000b24 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fb3f 	bl	8000b24 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e1ef      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0ef      	beq.n	80014a2 <HAL_RCC_OscConfig+0x22e>
 80014c2:	e020      	b.n	8001506 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80014c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fb26 	bl	8000b24 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014da:	e00d      	b.n	80014f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fb22 	bl	8000b24 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d906      	bls.n	80014f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1d2      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014f8:	4b8c      	ldr	r3, [pc, #560]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80014fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ea      	bne.n	80014dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80a6 	beq.w	8001660 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001518:	4b84      	ldr	r3, [pc, #528]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x2b4>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x2b6>
 8001528:	2300      	movs	r3, #0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00d      	beq.n	800154a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a7e      	ldr	r2, [pc, #504]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
 800153a:	4b7c      	ldr	r3, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001546:	2301      	movs	r3, #1
 8001548:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154a:	4b79      	ldr	r3, [pc, #484]	; (8001730 <HAL_RCC_OscConfig+0x4bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d118      	bne.n	8001588 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001556:	4b76      	ldr	r3, [pc, #472]	; (8001730 <HAL_RCC_OscConfig+0x4bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a75      	ldr	r2, [pc, #468]	; (8001730 <HAL_RCC_OscConfig+0x4bc>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001562:	f7ff fadf 	bl	8000b24 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fadb 	bl	8000b24 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e18b      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157c:	4b6c      	ldr	r3, [pc, #432]	; (8001730 <HAL_RCC_OscConfig+0x4bc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d108      	bne.n	80015a2 <HAL_RCC_OscConfig+0x32e>
 8001590:	4b66      	ldr	r3, [pc, #408]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001596:	4a65      	ldr	r2, [pc, #404]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a0:	e024      	b.n	80015ec <HAL_RCC_OscConfig+0x378>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d110      	bne.n	80015cc <HAL_RCC_OscConfig+0x358>
 80015aa:	4b60      	ldr	r3, [pc, #384]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	4a5e      	ldr	r2, [pc, #376]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ba:	4b5c      	ldr	r3, [pc, #368]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80015bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c0:	4a5a      	ldr	r2, [pc, #360]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ca:	e00f      	b.n	80015ec <HAL_RCC_OscConfig+0x378>
 80015cc:	4b57      	ldr	r3, [pc, #348]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	4a56      	ldr	r2, [pc, #344]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e2:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d016      	beq.n	8001622 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fa96 	bl	8000b24 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff fa92 	bl	8000b24 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e140      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ed      	beq.n	80015fc <HAL_RCC_OscConfig+0x388>
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fa7f 	bl	8000b24 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fa7b 	bl	8000b24 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e129      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001640:	4b3a      	ldr	r3, [pc, #232]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ed      	bne.n	800162a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800164e:	7ffb      	ldrb	r3, [r7, #31]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	4a34      	ldr	r2, [pc, #208]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 800165a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	2b00      	cmp	r3, #0
 800166a:	d03c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01c      	beq.n	80016ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800167a:	4a2c      	ldr	r2, [pc, #176]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fa4e 	bl	8000b24 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800168c:	f7ff fa4a 	bl	8000b24 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e0fa      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ef      	beq.n	800168c <HAL_RCC_OscConfig+0x418>
 80016ac:	e01b      	b.n	80016e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80016b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff fa31 	bl	8000b24 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c6:	f7ff fa2d 	bl	8000b24 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0dd      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80016da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ef      	bne.n	80016c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80d1 	beq.w	8001892 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	f000 808b 	beq.w	8001814 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d15e      	bne.n	80017c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x4b8>)
 800170c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fa07 	bl	8000b24 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001718:	e00c      	b.n	8001734 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fa03 	bl	8000b24 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d905      	bls.n	8001734 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0b3      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_OscConfig+0x628>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1ec      	bne.n	800171a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_RCC_OscConfig+0x628>)
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_RCC_OscConfig+0x62c>)
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6a11      	ldr	r1, [r2, #32]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001750:	3a01      	subs	r2, #1
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	4311      	orrs	r1, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800175a:	0212      	lsls	r2, r2, #8
 800175c:	4311      	orrs	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001762:	0852      	lsrs	r2, r2, #1
 8001764:	3a01      	subs	r2, #1
 8001766:	0552      	lsls	r2, r2, #21
 8001768:	4311      	orrs	r1, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800176e:	0852      	lsrs	r2, r2, #1
 8001770:	3a01      	subs	r2, #1
 8001772:	0652      	lsls	r2, r2, #25
 8001774:	4311      	orrs	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800177a:	06d2      	lsls	r2, r2, #27
 800177c:	430a      	orrs	r2, r1
 800177e:	4947      	ldr	r1, [pc, #284]	; (800189c <HAL_RCC_OscConfig+0x628>)
 8001780:	4313      	orrs	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001784:	4b45      	ldr	r3, [pc, #276]	; (800189c <HAL_RCC_OscConfig+0x628>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a44      	ldr	r2, [pc, #272]	; (800189c <HAL_RCC_OscConfig+0x628>)
 800178a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_RCC_OscConfig+0x628>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a41      	ldr	r2, [pc, #260]	; (800189c <HAL_RCC_OscConfig+0x628>)
 8001796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800179a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f9c2 	bl	8000b24 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff f9be 	bl	8000b24 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e06e      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_RCC_OscConfig+0x628>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x530>
 80017c2:	e066      	b.n	8001892 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_RCC_OscConfig+0x628>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a34      	ldr	r2, [pc, #208]	; (800189c <HAL_RCC_OscConfig+0x628>)
 80017ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_RCC_OscConfig+0x628>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a31      	ldr	r2, [pc, #196]	; (800189c <HAL_RCC_OscConfig+0x628>)
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_RCC_OscConfig+0x628>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a2e      	ldr	r2, [pc, #184]	; (800189c <HAL_RCC_OscConfig+0x628>)
 80017e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff f99a 	bl	8000b24 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f996 	bl	8000b24 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e046      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_OscConfig+0x628>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x580>
 8001812:	e03e      	b.n	8001892 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e039      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_RCC_OscConfig+0x628>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	429a      	cmp	r2, r3
 8001832:	d12c      	bne.n	800188e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	3b01      	subs	r3, #1
 8001840:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d123      	bne.n	800188e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11b      	bne.n	800188e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d113      	bne.n	800188e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d109      	bne.n	800188e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	019f800c 	.word	0x019f800c

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e11e      	b.n	8001afa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <HAL_RCC_ClockConfig+0x260>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d910      	bls.n	80018ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <HAL_RCC_ClockConfig+0x260>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 020f 	bic.w	r2, r3, #15
 80018d2:	498c      	ldr	r1, [pc, #560]	; (8001b04 <HAL_RCC_ClockConfig+0x260>)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b8a      	ldr	r3, [pc, #552]	; (8001b04 <HAL_RCC_ClockConfig+0x260>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e106      	b.n	8001afa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d073      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d129      	bne.n	8001954 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001900:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0f4      	b.n	8001afa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001910:	f000 f99e 	bl	8001c50 <RCC_GetSysClockFreqFromPLLSource>
 8001914:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4a7c      	ldr	r2, [pc, #496]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d93f      	bls.n	800199e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800191e:	4b7a      	ldr	r3, [pc, #488]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001932:	2b00      	cmp	r3, #0
 8001934:	d033      	beq.n	800199e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800193a:	2b00      	cmp	r3, #0
 800193c:	d12f      	bne.n	800199e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800193e:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001946:	4a70      	ldr	r2, [pc, #448]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e024      	b.n	800199e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d107      	bne.n	800196c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195c:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0c6      	b.n	8001afa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196c:	4b66      	ldr	r3, [pc, #408]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0be      	b.n	8001afa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800197c:	f000 f8ce 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001980:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4a61      	ldr	r2, [pc, #388]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d909      	bls.n	800199e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001992:	4a5d      	ldr	r2, [pc, #372]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4957      	ldr	r1, [pc, #348]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b0:	f7ff f8b8 	bl	8000b24 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff f8b4 	bl	8000b24 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e095      	b.n	8001afa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b4e      	ldr	r3, [pc, #312]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d023      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80019fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a18:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001a1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4936      	ldr	r1, [pc, #216]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b80      	cmp	r3, #128	; 0x80
 8001a38:	d105      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a3a:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <HAL_RCC_ClockConfig+0x260>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d21d      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_RCC_ClockConfig+0x260>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 020f 	bic.w	r2, r3, #15
 8001a5c:	4929      	ldr	r1, [pc, #164]	; (8001b04 <HAL_RCC_ClockConfig+0x260>)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a64:	f7ff f85e 	bl	8000b24 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff f85a 	bl	8000b24 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e03b      	b.n	8001afa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_ClockConfig+0x260>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1ed      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4917      	ldr	r1, [pc, #92]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	490f      	ldr	r1, [pc, #60]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ace:	f000 f825 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	490c      	ldr	r1, [pc, #48]	; (8001b10 <HAL_RCC_ClockConfig+0x26c>)
 8001ae0:	5ccb      	ldrb	r3, [r1, r3]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x270>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe ffca 	bl	8000a8c <HAL_InitTick>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	04c4b400 	.word	0x04c4b400
 8001b10:	08003560 	.word	0x08003560
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	e047      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	e03e      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d136      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3301      	adds	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d10c      	bne.n	8001b8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b70:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7a:	68d2      	ldr	r2, [r2, #12]
 8001b7c:	0a12      	lsrs	r2, r2, #8
 8001b7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
      break;
 8001b88:	e00c      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b94:	68d2      	ldr	r2, [r2, #12]
 8001b96:	0a12      	lsrs	r2, r2, #8
 8001b98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
      break;
 8001ba2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0e5b      	lsrs	r3, r3, #25
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e001      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bc4:	693b      	ldr	r3, [r7, #16]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	016e3600 	.word	0x016e3600

08001be0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4904      	ldr	r1, [pc, #16]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08003570 	.word	0x08003570

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c28:	f7ff ffda 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0adb      	lsrs	r3, r3, #11
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4904      	ldr	r1, [pc, #16]	; (8001c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08003570 	.word	0x08003570

08001c50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d10c      	bne.n	8001c8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c74:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c7e:	68d2      	ldr	r2, [r2, #12]
 8001c80:	0a12      	lsrs	r2, r2, #8
 8001c82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	617b      	str	r3, [r7, #20]
    break;
 8001c8c:	e00c      	b.n	8001ca8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c98:	68d2      	ldr	r2, [r2, #12]
 8001c9a:	0a12      	lsrs	r2, r2, #8
 8001c9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    break;
 8001ca6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0e5b      	lsrs	r3, r3, #25
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001cc2:	687b      	ldr	r3, [r7, #4]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	016e3600 	.word	0x016e3600
 8001cd8:	00f42400 	.word	0x00f42400

08001cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ce8:	2300      	movs	r3, #0
 8001cea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8098 	beq.w	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	4a3f      	ldr	r2, [pc, #252]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a39      	ldr	r2, [pc, #228]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d32:	f7fe fef7 	bl	8000b24 <HAL_GetTick>
 8001d36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d38:	e009      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7fe fef3 	bl	8000b24 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d902      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	74fb      	strb	r3, [r7, #19]
        break;
 8001d4c:	e005      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ef      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d5a:	7cfb      	ldrb	r3, [r7, #19]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d159      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01e      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d019      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001da8:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d016      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7fe feb3 	bl	8000b24 <HAL_GetTick>
 8001dbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc0:	e00b      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe feaf 	bl	8000b24 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d902      	bls.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	74fb      	strb	r3, [r7, #19]
            break;
 8001dd8:	e006      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ec      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001de8:	7cfb      	ldrb	r3, [r7, #19]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10b      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e04:	e008      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e06:	7cfb      	ldrb	r3, [r7, #19]
 8001e08:	74bb      	strb	r3, [r7, #18]
 8001e0a:	e005      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e18:	7c7b      	ldrb	r3, [r7, #17]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d105      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1e:	4ba7      	ldr	r3, [pc, #668]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4aa6      	ldr	r2, [pc, #664]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e36:	4ba1      	ldr	r3, [pc, #644]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3c:	f023 0203 	bic.w	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	499d      	ldr	r1, [pc, #628]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e58:	4b98      	ldr	r3, [pc, #608]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	f023 020c 	bic.w	r2, r3, #12
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4995      	ldr	r1, [pc, #596]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e7a:	4b90      	ldr	r3, [pc, #576]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	498c      	ldr	r1, [pc, #560]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e9c:	4b87      	ldr	r3, [pc, #540]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4984      	ldr	r1, [pc, #528]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	497b      	ldr	r1, [pc, #492]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ee0:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	4973      	ldr	r1, [pc, #460]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f02:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	496a      	ldr	r1, [pc, #424]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f24:	4b65      	ldr	r3, [pc, #404]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4962      	ldr	r1, [pc, #392]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	4959      	ldr	r1, [pc, #356]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	4951      	ldr	r1, [pc, #324]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	4948      	ldr	r1, [pc, #288]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d015      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4940      	ldr	r1, [pc, #256]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a3a      	ldr	r2, [pc, #232]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d015      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	4932      	ldr	r1, [pc, #200]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002002:	d105      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a2c      	ldr	r2, [pc, #176]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800200e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	4924      	ldr	r1, [pc, #144]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203a:	d105      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002046:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002072:	d105      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800207e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d019      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020aa:	d109      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a02      	ldr	r2, [pc, #8]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b6:	60d3      	str	r3, [r2, #12]
 80020b8:	e002      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4926      	ldr	r1, [pc, #152]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020ea:	d105      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a20      	ldr	r2, [pc, #128]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002112:	4918      	ldr	r1, [pc, #96]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d105      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800213e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	490a      	ldr	r1, [pc, #40]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002168:	7cbb      	ldrb	r3, [r7, #18]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e049      	b.n	800221e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fbce 	bl	8000940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 f9bc 	bl	8002534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d001      	beq.n	8002240 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e04c      	b.n	80022da <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <HAL_TIM_Base_Start+0xc0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d022      	beq.n	8002298 <HAL_TIM_Base_Start+0x70>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225a:	d01d      	beq.n	8002298 <HAL_TIM_Base_Start+0x70>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a22      	ldr	r2, [pc, #136]	; (80022ec <HAL_TIM_Base_Start+0xc4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d018      	beq.n	8002298 <HAL_TIM_Base_Start+0x70>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_TIM_Base_Start+0xc8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <HAL_TIM_Base_Start+0x70>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <HAL_TIM_Base_Start+0xcc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00e      	beq.n	8002298 <HAL_TIM_Base_Start+0x70>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <HAL_TIM_Base_Start+0xd0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d009      	beq.n	8002298 <HAL_TIM_Base_Start+0x70>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <HAL_TIM_Base_Start+0xd4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_TIM_Base_Start+0x70>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <HAL_TIM_Base_Start+0xd8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d115      	bne.n	80022c4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_TIM_Base_Start+0xdc>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d015      	beq.n	80022d6 <HAL_TIM_Base_Start+0xae>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d011      	beq.n	80022d6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c2:	e008      	b.n	80022d6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e000      	b.n	80022d8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800
 80022f4:	40000c00 	.word	0x40000c00
 80022f8:	40013400 	.word	0x40013400
 80022fc:	40014000 	.word	0x40014000
 8002300:	40015000 	.word	0x40015000
 8002304:	00010007 	.word	0x00010007

08002308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_TIM_ConfigClockSource+0x1c>
 8002320:	2302      	movs	r3, #2
 8002322:	e0f6      	b.n	8002512 <HAL_TIM_ConfigClockSource+0x20a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800234e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6f      	ldr	r2, [pc, #444]	; (800251c <HAL_TIM_ConfigClockSource+0x214>)
 800235e:	4293      	cmp	r3, r2
 8002360:	f000 80c1 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 8002364:	4a6d      	ldr	r2, [pc, #436]	; (800251c <HAL_TIM_ConfigClockSource+0x214>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f200 80c6 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800236c:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_TIM_ConfigClockSource+0x218>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f000 80b9 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 8002374:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_TIM_ConfigClockSource+0x218>)
 8002376:	4293      	cmp	r3, r2
 8002378:	f200 80be 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800237c:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_TIM_ConfigClockSource+0x21c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	f000 80b1 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 8002384:	4a67      	ldr	r2, [pc, #412]	; (8002524 <HAL_TIM_ConfigClockSource+0x21c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f200 80b6 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800238c:	4a66      	ldr	r2, [pc, #408]	; (8002528 <HAL_TIM_ConfigClockSource+0x220>)
 800238e:	4293      	cmp	r3, r2
 8002390:	f000 80a9 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 8002394:	4a64      	ldr	r2, [pc, #400]	; (8002528 <HAL_TIM_ConfigClockSource+0x220>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f200 80ae 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 800239c:	4a63      	ldr	r2, [pc, #396]	; (800252c <HAL_TIM_ConfigClockSource+0x224>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	f000 80a1 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 80023a4:	4a61      	ldr	r2, [pc, #388]	; (800252c <HAL_TIM_ConfigClockSource+0x224>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	f200 80a6 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 80023ac:	4a60      	ldr	r2, [pc, #384]	; (8002530 <HAL_TIM_ConfigClockSource+0x228>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f000 8099 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 80023b4:	4a5e      	ldr	r2, [pc, #376]	; (8002530 <HAL_TIM_ConfigClockSource+0x228>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	f200 809e 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 80023bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80023c0:	f000 8091 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 80023c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80023c8:	f200 8096 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 80023cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023d0:	f000 8089 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 80023d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023d8:	f200 808e 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 80023dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e0:	d03e      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x158>
 80023e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e6:	f200 8087 	bhi.w	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 80023ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ee:	f000 8086 	beq.w	80024fe <HAL_TIM_ConfigClockSource+0x1f6>
 80023f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f6:	d87f      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 80023f8:	2b70      	cmp	r3, #112	; 0x70
 80023fa:	d01a      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x12a>
 80023fc:	2b70      	cmp	r3, #112	; 0x70
 80023fe:	d87b      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002400:	2b60      	cmp	r3, #96	; 0x60
 8002402:	d050      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x19e>
 8002404:	2b60      	cmp	r3, #96	; 0x60
 8002406:	d877      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002408:	2b50      	cmp	r3, #80	; 0x50
 800240a:	d03c      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x17e>
 800240c:	2b50      	cmp	r3, #80	; 0x50
 800240e:	d873      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d058      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x1be>
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d86f      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002418:	2b30      	cmp	r3, #48	; 0x30
 800241a:	d064      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 800241c:	2b30      	cmp	r3, #48	; 0x30
 800241e:	d86b      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002420:	2b20      	cmp	r3, #32
 8002422:	d060      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 8002424:	2b20      	cmp	r3, #32
 8002426:	d867      	bhi.n	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d05c      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 800242c:	2b10      	cmp	r3, #16
 800242e:	d05a      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x1de>
 8002430:	e062      	b.n	80024f8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f000 f99b 	bl	800277c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	609a      	str	r2, [r3, #8]
      break;
 800245e:	e04f      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f000 f984 	bl	800277c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002482:	609a      	str	r2, [r3, #8]
      break;
 8002484:	e03c      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	461a      	mov	r2, r3
 8002494:	f000 f8f6 	bl	8002684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2150      	movs	r1, #80	; 0x50
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f94f 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 80024a4:	e02c      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f000 f915 	bl	80026e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2160      	movs	r1, #96	; 0x60
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f93f 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 80024c4:	e01c      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f000 f8d6 	bl	8002684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f92f 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 80024e4:	e00c      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f000 f926 	bl	8002742 <TIM_ITRx_SetConfig>
      break;
 80024f6:	e003      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      break;
 80024fc:	e000      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80024fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	00100070 	.word	0x00100070
 8002520:	00100060 	.word	0x00100060
 8002524:	00100050 	.word	0x00100050
 8002528:	00100040 	.word	0x00100040
 800252c:	00100030 	.word	0x00100030
 8002530:	00100020 	.word	0x00100020

08002534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a46      	ldr	r2, [pc, #280]	; (8002660 <TIM_Base_SetConfig+0x12c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d017      	beq.n	800257c <TIM_Base_SetConfig+0x48>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002552:	d013      	beq.n	800257c <TIM_Base_SetConfig+0x48>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a43      	ldr	r2, [pc, #268]	; (8002664 <TIM_Base_SetConfig+0x130>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00f      	beq.n	800257c <TIM_Base_SetConfig+0x48>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a42      	ldr	r2, [pc, #264]	; (8002668 <TIM_Base_SetConfig+0x134>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00b      	beq.n	800257c <TIM_Base_SetConfig+0x48>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a41      	ldr	r2, [pc, #260]	; (800266c <TIM_Base_SetConfig+0x138>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d007      	beq.n	800257c <TIM_Base_SetConfig+0x48>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a40      	ldr	r2, [pc, #256]	; (8002670 <TIM_Base_SetConfig+0x13c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <TIM_Base_SetConfig+0x48>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3f      	ldr	r2, [pc, #252]	; (8002674 <TIM_Base_SetConfig+0x140>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d108      	bne.n	800258e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a33      	ldr	r2, [pc, #204]	; (8002660 <TIM_Base_SetConfig+0x12c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d023      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d01f      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a30      	ldr	r2, [pc, #192]	; (8002664 <TIM_Base_SetConfig+0x130>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01b      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <TIM_Base_SetConfig+0x134>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d017      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a2e      	ldr	r2, [pc, #184]	; (800266c <TIM_Base_SetConfig+0x138>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <TIM_Base_SetConfig+0x13c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00f      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <TIM_Base_SetConfig+0x144>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00b      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a2c      	ldr	r2, [pc, #176]	; (800267c <TIM_Base_SetConfig+0x148>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <TIM_Base_SetConfig+0x14c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d003      	beq.n	80025de <TIM_Base_SetConfig+0xaa>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <TIM_Base_SetConfig+0x140>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d108      	bne.n	80025f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <TIM_Base_SetConfig+0x12c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d013      	beq.n	8002644 <TIM_Base_SetConfig+0x110>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a14      	ldr	r2, [pc, #80]	; (8002670 <TIM_Base_SetConfig+0x13c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00f      	beq.n	8002644 <TIM_Base_SetConfig+0x110>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <TIM_Base_SetConfig+0x144>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00b      	beq.n	8002644 <TIM_Base_SetConfig+0x110>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <TIM_Base_SetConfig+0x148>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d007      	beq.n	8002644 <TIM_Base_SetConfig+0x110>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <TIM_Base_SetConfig+0x14c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <TIM_Base_SetConfig+0x110>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <TIM_Base_SetConfig+0x140>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d103      	bne.n	800264c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	615a      	str	r2, [r3, #20]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800
 800266c:	40000c00 	.word	0x40000c00
 8002670:	40013400 	.word	0x40013400
 8002674:	40015000 	.word	0x40015000
 8002678:	40014000 	.word	0x40014000
 800267c:	40014400 	.word	0x40014400
 8002680:	40014800 	.word	0x40014800

08002684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f023 0201 	bic.w	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 030a 	bic.w	r3, r3, #10
 80026c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	621a      	str	r2, [r3, #32]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b087      	sub	sp, #28
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0210 	bic.w	r2, r3, #16
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800270c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	031b      	lsls	r3, r3, #12
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800271e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	621a      	str	r2, [r3, #32]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	f043 0307 	orr.w	r3, r3, #7
 8002768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	431a      	orrs	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e074      	b.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a34      	ldr	r2, [pc, #208]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a33      	ldr	r2, [pc, #204]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a31      	ldr	r2, [pc, #196]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002818:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d01d      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d018      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00e      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10c      	bne.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40013400 	.word	0x40013400
 80028d4:	40015000 	.word	0x40015000
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40000800 	.word	0x40000800
 80028e0:	40000c00 	.word	0x40000c00
 80028e4:	40014000 	.word	0x40014000

080028e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e042      	b.n	8002980 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fd ffbf 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2224      	movs	r2, #36	; 0x24
 8002916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f82c 	bl	8002988 <UART_SetConfig>
 8002930:	4603      	mov	r3, r0
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e022      	b.n	8002980 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fb1c 	bl	8002f80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fba3 	bl	80030c4 <UART_CheckIdleState>
 800297e:	4603      	mov	r3, r0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800298c:	b08c      	sub	sp, #48	; 0x30
 800298e:	af00      	add	r7, sp, #0
 8002990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4baa      	ldr	r3, [pc, #680]	; (8002c60 <UART_SetConfig+0x2d8>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a9f      	ldr	r2, [pc, #636]	; (8002c64 <UART_SetConfig+0x2dc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	4313      	orrs	r3, r2
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80029fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f023 010f 	bic.w	r1, r3, #15
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a90      	ldr	r2, [pc, #576]	; (8002c68 <UART_SetConfig+0x2e0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d125      	bne.n	8002a78 <UART_SetConfig+0xf0>
 8002a2c:	4b8f      	ldr	r3, [pc, #572]	; (8002c6c <UART_SetConfig+0x2e4>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d81a      	bhi.n	8002a70 <UART_SetConfig+0xe8>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <UART_SetConfig+0xb8>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a61 	.word	0x08002a61
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a69 	.word	0x08002a69
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a56:	e116      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a5e:	e112      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002a60:	2304      	movs	r3, #4
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a66:	e10e      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002a68:	2308      	movs	r3, #8
 8002a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a6e:	e10a      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002a70:	2310      	movs	r3, #16
 8002a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a76:	e106      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <UART_SetConfig+0x2e8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d138      	bne.n	8002af4 <UART_SetConfig+0x16c>
 8002a82:	4b7a      	ldr	r3, [pc, #488]	; (8002c6c <UART_SetConfig+0x2e4>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d82d      	bhi.n	8002aec <UART_SetConfig+0x164>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <UART_SetConfig+0x110>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002acd 	.word	0x08002acd
 8002a9c:	08002aed 	.word	0x08002aed
 8002aa0:	08002aed 	.word	0x08002aed
 8002aa4:	08002aed 	.word	0x08002aed
 8002aa8:	08002add 	.word	0x08002add
 8002aac:	08002aed 	.word	0x08002aed
 8002ab0:	08002aed 	.word	0x08002aed
 8002ab4:	08002aed 	.word	0x08002aed
 8002ab8:	08002ad5 	.word	0x08002ad5
 8002abc:	08002aed 	.word	0x08002aed
 8002ac0:	08002aed 	.word	0x08002aed
 8002ac4:	08002aed 	.word	0x08002aed
 8002ac8:	08002ae5 	.word	0x08002ae5
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ad2:	e0d8      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ada:	e0d4      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002adc:	2304      	movs	r3, #4
 8002ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ae2:	e0d0      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002aea:	e0cc      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002aec:	2310      	movs	r3, #16
 8002aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002af2:	e0c8      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a5e      	ldr	r2, [pc, #376]	; (8002c74 <UART_SetConfig+0x2ec>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d125      	bne.n	8002b4a <UART_SetConfig+0x1c2>
 8002afe:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <UART_SetConfig+0x2e4>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b08:	2b30      	cmp	r3, #48	; 0x30
 8002b0a:	d016      	beq.n	8002b3a <UART_SetConfig+0x1b2>
 8002b0c:	2b30      	cmp	r3, #48	; 0x30
 8002b0e:	d818      	bhi.n	8002b42 <UART_SetConfig+0x1ba>
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d00a      	beq.n	8002b2a <UART_SetConfig+0x1a2>
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d814      	bhi.n	8002b42 <UART_SetConfig+0x1ba>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <UART_SetConfig+0x19a>
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d008      	beq.n	8002b32 <UART_SetConfig+0x1aa>
 8002b20:	e00f      	b.n	8002b42 <UART_SetConfig+0x1ba>
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b28:	e0ad      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b30:	e0a9      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b32:	2304      	movs	r3, #4
 8002b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b38:	e0a5      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b40:	e0a1      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b42:	2310      	movs	r3, #16
 8002b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b48:	e09d      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a4a      	ldr	r2, [pc, #296]	; (8002c78 <UART_SetConfig+0x2f0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d125      	bne.n	8002ba0 <UART_SetConfig+0x218>
 8002b54:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <UART_SetConfig+0x2e4>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b60:	d016      	beq.n	8002b90 <UART_SetConfig+0x208>
 8002b62:	2bc0      	cmp	r3, #192	; 0xc0
 8002b64:	d818      	bhi.n	8002b98 <UART_SetConfig+0x210>
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d00a      	beq.n	8002b80 <UART_SetConfig+0x1f8>
 8002b6a:	2b80      	cmp	r3, #128	; 0x80
 8002b6c:	d814      	bhi.n	8002b98 <UART_SetConfig+0x210>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <UART_SetConfig+0x1f0>
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d008      	beq.n	8002b88 <UART_SetConfig+0x200>
 8002b76:	e00f      	b.n	8002b98 <UART_SetConfig+0x210>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b7e:	e082      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b80:	2302      	movs	r3, #2
 8002b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b86:	e07e      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b8e:	e07a      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b90:	2308      	movs	r3, #8
 8002b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b96:	e076      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002b98:	2310      	movs	r3, #16
 8002b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b9e:	e072      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a35      	ldr	r2, [pc, #212]	; (8002c7c <UART_SetConfig+0x2f4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d12a      	bne.n	8002c00 <UART_SetConfig+0x278>
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <UART_SetConfig+0x2e4>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bb8:	d01a      	beq.n	8002bf0 <UART_SetConfig+0x268>
 8002bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bbe:	d81b      	bhi.n	8002bf8 <UART_SetConfig+0x270>
 8002bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc4:	d00c      	beq.n	8002be0 <UART_SetConfig+0x258>
 8002bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bca:	d815      	bhi.n	8002bf8 <UART_SetConfig+0x270>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <UART_SetConfig+0x250>
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd4:	d008      	beq.n	8002be8 <UART_SetConfig+0x260>
 8002bd6:	e00f      	b.n	8002bf8 <UART_SetConfig+0x270>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bde:	e052      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002be0:	2302      	movs	r3, #2
 8002be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002be6:	e04e      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002be8:	2304      	movs	r3, #4
 8002bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bee:	e04a      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bf6:	e046      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bfe:	e042      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <UART_SetConfig+0x2dc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d13a      	bne.n	8002c80 <UART_SetConfig+0x2f8>
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <UART_SetConfig+0x2e4>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c18:	d01a      	beq.n	8002c50 <UART_SetConfig+0x2c8>
 8002c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c1e:	d81b      	bhi.n	8002c58 <UART_SetConfig+0x2d0>
 8002c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c24:	d00c      	beq.n	8002c40 <UART_SetConfig+0x2b8>
 8002c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c2a:	d815      	bhi.n	8002c58 <UART_SetConfig+0x2d0>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <UART_SetConfig+0x2b0>
 8002c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c34:	d008      	beq.n	8002c48 <UART_SetConfig+0x2c0>
 8002c36:	e00f      	b.n	8002c58 <UART_SetConfig+0x2d0>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c3e:	e022      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002c40:	2302      	movs	r3, #2
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c46:	e01e      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c4e:	e01a      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002c50:	2308      	movs	r3, #8
 8002c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c56:	e016      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c5e:	e012      	b.n	8002c86 <UART_SetConfig+0x2fe>
 8002c60:	cfff69f3 	.word	0xcfff69f3
 8002c64:	40008000 	.word	0x40008000
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40004400 	.word	0x40004400
 8002c74:	40004800 	.word	0x40004800
 8002c78:	40004c00 	.word	0x40004c00
 8002c7c:	40005000 	.word	0x40005000
 8002c80:	2310      	movs	r3, #16
 8002c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4aae      	ldr	r2, [pc, #696]	; (8002f44 <UART_SetConfig+0x5bc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	f040 8097 	bne.w	8002dc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d823      	bhi.n	8002ce2 <UART_SetConfig+0x35a>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <UART_SetConfig+0x318>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08002ce3 	.word	0x08002ce3
 8002ca8:	08002ccd 	.word	0x08002ccd
 8002cac:	08002ce3 	.word	0x08002ce3
 8002cb0:	08002cd3 	.word	0x08002cd3
 8002cb4:	08002ce3 	.word	0x08002ce3
 8002cb8:	08002ce3 	.word	0x08002ce3
 8002cbc:	08002ce3 	.word	0x08002ce3
 8002cc0:	08002cdb 	.word	0x08002cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f7fe ff98 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cca:	e010      	b.n	8002cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ccc:	4b9e      	ldr	r3, [pc, #632]	; (8002f48 <UART_SetConfig+0x5c0>)
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002cd0:	e00d      	b.n	8002cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd2:	f7fe ff23 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8002cd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002cd8:	e009      	b.n	8002cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ce0:	e005      	b.n	8002cee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8130 	beq.w	8002f56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	4a94      	ldr	r2, [pc, #592]	; (8002f4c <UART_SetConfig+0x5c4>)
 8002cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d305      	bcc.n	8002d26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d903      	bls.n	8002d2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d2c:	e113      	b.n	8002f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	2200      	movs	r2, #0
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	60fa      	str	r2, [r7, #12]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	4a84      	ldr	r2, [pc, #528]	; (8002f4c <UART_SetConfig+0x5c4>)
 8002d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2200      	movs	r2, #0
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d50:	f7fd fa62 	bl	8000218 <__aeabi_uldivmod>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	020b      	lsls	r3, r1, #8
 8002d66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002d6a:	0202      	lsls	r2, r0, #8
 8002d6c:	6979      	ldr	r1, [r7, #20]
 8002d6e:	6849      	ldr	r1, [r1, #4]
 8002d70:	0849      	lsrs	r1, r1, #1
 8002d72:	2000      	movs	r0, #0
 8002d74:	460c      	mov	r4, r1
 8002d76:	4605      	mov	r5, r0
 8002d78:	eb12 0804 	adds.w	r8, r2, r4
 8002d7c:	eb43 0905 	adc.w	r9, r3, r5
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	469a      	mov	sl, r3
 8002d88:	4693      	mov	fp, r2
 8002d8a:	4652      	mov	r2, sl
 8002d8c:	465b      	mov	r3, fp
 8002d8e:	4640      	mov	r0, r8
 8002d90:	4649      	mov	r1, r9
 8002d92:	f7fd fa41 	bl	8000218 <__aeabi_uldivmod>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da4:	d308      	bcc.n	8002db8 <UART_SetConfig+0x430>
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dac:	d204      	bcs.n	8002db8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a3a      	ldr	r2, [r7, #32]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	e0ce      	b.n	8002f56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002dbe:	e0ca      	b.n	8002f56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc8:	d166      	bne.n	8002e98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002dca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d827      	bhi.n	8002e22 <UART_SetConfig+0x49a>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <UART_SetConfig+0x450>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002e05 	.word	0x08002e05
 8002de0:	08002e0d 	.word	0x08002e0d
 8002de4:	08002e23 	.word	0x08002e23
 8002de8:	08002e13 	.word	0x08002e13
 8002dec:	08002e23 	.word	0x08002e23
 8002df0:	08002e23 	.word	0x08002e23
 8002df4:	08002e23 	.word	0x08002e23
 8002df8:	08002e1b 	.word	0x08002e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7fe fefc 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e02:	e014      	b.n	8002e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7fe ff0e 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e0a:	e010      	b.n	8002e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0c:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <UART_SetConfig+0x5c0>)
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e10:	e00d      	b.n	8002e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e12:	f7fe fe83 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8002e16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e18:	e009      	b.n	8002e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e20:	e005      	b.n	8002e2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8090 	beq.w	8002f56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	4a44      	ldr	r2, [pc, #272]	; (8002f4c <UART_SetConfig+0x5c4>)
 8002e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e40:	461a      	mov	r2, r3
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e48:	005a      	lsls	r2, r3, #1
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	441a      	add	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	d916      	bls.n	8002e90 <UART_SetConfig+0x508>
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d212      	bcs.n	8002e90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	f023 030f 	bic.w	r3, r3, #15
 8002e72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	8bfb      	ldrh	r3, [r7, #30]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	8bfa      	ldrh	r2, [r7, #30]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	e062      	b.n	8002f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e96:	e05e      	b.n	8002f56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d828      	bhi.n	8002ef2 <UART_SetConfig+0x56a>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <UART_SetConfig+0x520>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002ecd 	.word	0x08002ecd
 8002eac:	08002ed5 	.word	0x08002ed5
 8002eb0:	08002edd 	.word	0x08002edd
 8002eb4:	08002ef3 	.word	0x08002ef3
 8002eb8:	08002ee3 	.word	0x08002ee3
 8002ebc:	08002ef3 	.word	0x08002ef3
 8002ec0:	08002ef3 	.word	0x08002ef3
 8002ec4:	08002ef3 	.word	0x08002ef3
 8002ec8:	08002eeb 	.word	0x08002eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ecc:	f7fe fe94 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002ed0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ed2:	e014      	b.n	8002efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ed4:	f7fe fea6 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eda:	e010      	b.n	8002efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <UART_SetConfig+0x5c0>)
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ee0:	e00d      	b.n	8002efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee2:	f7fe fe1b 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8002ee6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ee8:	e009      	b.n	8002efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ef0:	e005      	b.n	8002efe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002efc:	bf00      	nop
    }

    if (pclk != 0U)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d028      	beq.n	8002f56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <UART_SetConfig+0x5c4>)
 8002f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	441a      	add	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	d910      	bls.n	8002f50 <UART_SetConfig+0x5c8>
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d20c      	bcs.n	8002f50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	e009      	b.n	8002f56 <UART_SetConfig+0x5ce>
 8002f42:	bf00      	nop
 8002f44:	40008000 	.word	0x40008000
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	08003578 	.word	0x08003578
      }
      else
      {
        ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002f72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3730      	adds	r7, #48	; 0x30
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01a      	beq.n	8003096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307e:	d10a      	bne.n	8003096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
  }
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030d4:	f7fd fd26 	bl	8000b24 <HAL_GetTick>
 80030d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d10e      	bne.n	8003106 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f82f 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e025      	b.n	8003152 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d10e      	bne.n	8003132 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f819 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e00f      	b.n	8003152 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b09c      	sub	sp, #112	; 0x70
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316a:	e0a9      	b.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	f000 80a5 	beq.w	80032c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fd fcd5 	bl	8000b24 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <UART_WaitOnFlagUntilTimeout+0x32>
 8003186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003188:	2b00      	cmp	r3, #0
 800318a:	d140      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031a0:	667b      	str	r3, [r7, #100]	; 0x64
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e6      	bne.n	800318c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3308      	adds	r3, #8
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	663b      	str	r3, [r7, #96]	; 0x60
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3308      	adds	r3, #8
 80031dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031de:	64ba      	str	r2, [r7, #72]	; 0x48
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e069      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d051      	beq.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322a:	d149      	bne.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003234:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800324a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
 8003256:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800325a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e6      	bne.n	8003236 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3308      	adds	r3, #8
 800326e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	613b      	str	r3, [r7, #16]
   return(result);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3308      	adds	r3, #8
 8003286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003288:	623a      	str	r2, [r7, #32]
 800328a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	69f9      	ldr	r1, [r7, #28]
 800328e:	6a3a      	ldr	r2, [r7, #32]
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	61bb      	str	r3, [r7, #24]
   return(result);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e5      	bne.n	8003268 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e010      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4013      	ands	r3, r2
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	429a      	cmp	r2, r3
 80032dc:	f43f af46 	beq.w	800316c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3770      	adds	r7, #112	; 0x70
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_UARTEx_DisableFifoMode+0x16>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e027      	b.n	8003350 <HAL_UARTEx_DisableFifoMode+0x66>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	; 0x24
 800330c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800332e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003370:	2302      	movs	r3, #2
 8003372:	e02d      	b.n	80033d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f84f 	bl	8003454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e02d      	b.n	800344c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	; 0x24
 80033fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f811 	bl	8003454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003460:	2b00      	cmp	r3, #0
 8003462:	d108      	bne.n	8003476 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003474:	e031      	b.n	80034da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003476:	2308      	movs	r3, #8
 8003478:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800347a:	2308      	movs	r3, #8
 800347c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	0e5b      	lsrs	r3, r3, #25
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	0f5b      	lsrs	r3, r3, #29
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800349e:	7bbb      	ldrb	r3, [r7, #14]
 80034a0:	7b3a      	ldrb	r2, [r7, #12]
 80034a2:	4911      	ldr	r1, [pc, #68]	; (80034e8 <UARTEx_SetNbDataToProcess+0x94>)
 80034a4:	5c8a      	ldrb	r2, [r1, r2]
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80034aa:	7b3a      	ldrb	r2, [r7, #12]
 80034ac:	490f      	ldr	r1, [pc, #60]	; (80034ec <UARTEx_SetNbDataToProcess+0x98>)
 80034ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	7b7a      	ldrb	r2, [r7, #13]
 80034c0:	4909      	ldr	r1, [pc, #36]	; (80034e8 <UARTEx_SetNbDataToProcess+0x94>)
 80034c2:	5c8a      	ldrb	r2, [r1, r2]
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80034c8:	7b7a      	ldrb	r2, [r7, #13]
 80034ca:	4908      	ldr	r1, [pc, #32]	; (80034ec <UARTEx_SetNbDataToProcess+0x98>)
 80034cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	08003590 	.word	0x08003590
 80034ec:	08003598 	.word	0x08003598

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	4d0d      	ldr	r5, [pc, #52]	; (8003528 <__libc_init_array+0x38>)
 80034f4:	4c0d      	ldr	r4, [pc, #52]	; (800352c <__libc_init_array+0x3c>)
 80034f6:	1b64      	subs	r4, r4, r5
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	2600      	movs	r6, #0
 80034fc:	42a6      	cmp	r6, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	4d0b      	ldr	r5, [pc, #44]	; (8003530 <__libc_init_array+0x40>)
 8003502:	4c0c      	ldr	r4, [pc, #48]	; (8003534 <__libc_init_array+0x44>)
 8003504:	f000 f820 	bl	8003548 <_init>
 8003508:	1b64      	subs	r4, r4, r5
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	2600      	movs	r6, #0
 800350e:	42a6      	cmp	r6, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	f855 3b04 	ldr.w	r3, [r5], #4
 8003518:	4798      	blx	r3
 800351a:	3601      	adds	r6, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003522:	4798      	blx	r3
 8003524:	3601      	adds	r6, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	080035a8 	.word	0x080035a8
 800352c:	080035a8 	.word	0x080035a8
 8003530:	080035a8 	.word	0x080035a8
 8003534:	080035ac 	.word	0x080035ac

08003538 <memset>:
 8003538:	4402      	add	r2, r0
 800353a:	4603      	mov	r3, r0
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	f803 1b01 	strb.w	r1, [r3], #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr
